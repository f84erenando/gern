/*
# [Initial Schema Setup for GERN]
This migration script sets up the initial database structure for the GERN application. It includes creating user profiles, a table for videos, and setting up Row Level Security (RLS) for data protection. It also creates a trigger to automatically populate user profiles upon new user registration.

## Query Description: This operation is structural and foundational for the application. It creates new tables and security policies. There is no risk to existing data as this is the initial setup. However, it's critical for the application's functionality.

## Metadata:
- Schema-Category: "Structural"
- Impact-Level: "High"
- Requires-Backup: false
- Reversible: true (by dropping tables and functions)

## Structure Details:
- Tables Created: `profiles`, `videos`
- Functions Created: `handle_new_user`
- Triggers Created: `on_auth_user_created`
- RLS Policies Added: For `profiles` and `videos` tables.

## Security Implications:
- RLS Status: Enabled on `profiles` and `videos`.
- Policy Changes: Yes, new policies are created to ensure users can only access their own data.
- Auth Requirements: Policies are based on `auth.uid()`.

## Performance Impact:
- Indexes: Primary keys and foreign keys are indexed by default.
- Triggers: One trigger is added to `auth.users` table, which has a minor performance impact on user creation.
- Estimated Impact: Low, as operations are efficient.
*/

-- 1. Create Profiles Table
-- Stores public-facing user data and application-specific roles.
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  full_name TEXT,
  email TEXT,
  avatar_url TEXT,
  role TEXT DEFAULT 'user'
);
COMMENT ON TABLE public.profiles IS 'Public user profiles and roles.';

-- 2. Create Videos Table
-- Stores information about videos generated by users.
CREATE TABLE public.videos (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  title TEXT,
  status TEXT DEFAULT 'pending',
  video_url TEXT,
  thumbnail_url TEXT,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);
COMMENT ON TABLE public.videos IS 'Stores videos generated by users.';

-- 3. Set up Row Level Security (RLS)
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.videos ENABLE ROW LEVEL SECURITY;

-- 4. Create RLS Policies for Profiles
CREATE POLICY "Users can view their own profile."
ON public.profiles FOR SELECT
USING (auth.uid() = id);

CREATE POLICY "Users can insert their own profile."
ON public.profiles FOR INSERT
WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can update their own profile."
ON public.profiles FOR UPDATE
USING (auth.uid() = id);

-- 5. Create RLS Policies for Videos
CREATE POLICY "Users can view their own videos."
ON public.videos FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own videos."
ON public.videos FOR INSERT
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own videos."
ON public.videos FOR UPDATE
USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own videos."
ON public.videos FOR DELETE
USING (auth.uid() = user_id);

-- 6. Create a function to handle new user sign-ups
-- This function will be triggered when a new user is created in auth.users.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = public
AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, email, avatar_url)
  VALUES (
    new.id,
    new.raw_user_meta_data->>'full_name',
    new.email,
    new.raw_user_meta_data->>'avatar_url'
  );
  RETURN new;
END;
$$;

-- 7. Create a trigger to call the function on new user creation
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- 8. Add admin access policies (optional, but good for the admin dashboard)
CREATE POLICY "Admins can access all profiles."
ON public.profiles FOR ALL
USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' );

CREATE POLICY "Admins can access all videos."
ON public.videos FOR ALL
USING ( (SELECT role FROM public.profiles WHERE id = auth.uid()) = 'admin' );
